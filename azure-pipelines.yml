trigger:
- develop
- master

pool:
  vmImage: 'windows-2019'

stages:
- stage: Build
  jobs:
  - job: Build
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        useGlobalJson: true
    - task: PowerShell@2
      displayName: 'Restore'
      inputs:
        filePath: 'build.ps1'
        arguments: 'Restore'
    - task: PowerShell@2
      displayName: 'Check source formatting'
      condition: or(eq(variables['Build.Reason'], 'PullRequest'), eq(variables['build.sourceBranch'], 'refs/heads/master'))
      inputs:
        filePath: 'build.ps1'
        arguments: 'DotNetFormatCheck'
    - task: PowerShell@2
      displayName: 'Compile'
      inputs:
        filePath: 'build.ps1'
        arguments: 'Compile'
    - task: PowerShell@2
      displayName: 'Test'
      inputs:
        filePath: 'build.ps1'
        arguments: 'Test'
    - task: PublishTestResults@2
      condition: always()
      inputs:
        testResultsFormat: 'VSTest'
        testResultsFiles: '**/*.trx'
        mergeTestResults: true
    - task: PowerShell@2
      displayName: 'Pack'
      inputs:
        filePath: 'build.ps1'
        arguments: 'Pack'
    - task: PowerShell@2
      displayName: 'Create code coverate report'
      inputs:
        filePath: 'build.ps1'
        arguments: 'CoverageReport'      
    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: './build-artifacts/test/coverage-reports/Cobertura.xml'
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: './build-artifacts/packages'
        artifact: 'packages'
        publishLocation: 'pipeline'
  - job: TestCodeGen
    displayName: 'Test Code Gen'
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        useGlobalJson: true
    - task: PowerShell@2
      displayName: 'Restore'
      inputs:
        filePath: 'build.ps1'
        arguments: 'Restore'
    - task: PowerShell@2
      displayName: 'Compile'
      inputs:
        filePath: 'build.ps1'
        arguments: 'Compile'
    - task: PowerShell@2
      displayName: 'Code Gen'
      inputs:
        filePath: 'build.ps1'
        arguments: 'genquick'
    - task: PowerShell@2
      displayName: 'Compile'
      inputs:
        filePath: 'build.ps1'
        arguments: 'Compile'
    - task: PowerShell@2
      displayName: 'Test'
      inputs:
        filePath: 'build.ps1'
        arguments: 'Test'

- stage: DeployPreRelease
  displayName: Deploy Pre-Release
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  jobs:
  - deployment: AzureArtifacts
    displayName: Azure Artifacts
    environment: Azure Artifacts
    strategy:
     runOnce:
       deploy:
        steps:
        - download: 'current'
          artifact: 'packages'
          patterns: '*.nupkg'
        - task: NuGetCommand@2
          displayName: 'Push NuGet packages to Azure Artifacts'
          inputs:
            command: 'push'
            packagesToPush: '$(Pipeline.Workspace)/packages/*.nupkg'
            nuGetFeedType: 'internal'
            publishVstsFeed: 'e8075084-15b0-483c-9179-16bebb7799da/1ad92006-33db-4ad8-8a7c-afb99cb72229'
            allowPackageConflicts: true
- stage: DeployRelease
  displayName: Deploy Release
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  jobs:
  - deployment: NugetGallery
    displayName: nuget.org
    environment: Nuget Gallery
    strategy:
     runOnce:
       deploy:
        steps:
        - download: 'current'
          artifact: 'packages'
          patterns: '*'
        - task: NuGetCommand@2
          displayName: 'Push NuGet packages to NuGet.org'
          inputs:
            command: 'push'
            packagesToPush: '$(Pipeline.Workspace)/packages/*'
            nuGetFeedType: 'external'
            publishFeedCredentials: 'nuget.org'